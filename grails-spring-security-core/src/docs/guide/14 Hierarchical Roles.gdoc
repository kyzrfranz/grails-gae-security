Hierarchical roles are a convenient way to reduce clutter in your request mappings.

{table}
*Property* | *Default Value*  | *Meaning*
roleHierarchy | none | Hierarchical role definition.
{table} 

For example, if you have several types of 'admin' roles that can be used to access a URL pattern and you do not use hierarchical roles, you need to specify all the admin roles:

{code}
package com.mycompany.myapp

import grails.plugins.springsecurity.Secured

class SomeController {

   @Secured(['ROLE_ADMIN', 'ROLE_FINANCE_ADMIN', 'ROLE_SUPERADMIN'])
   def someAction = {
      ...
   }
}
{code}

However, if you have a business rule that says @ROLE_FINANCE_ADMIN@ implies being granted @ROLE_ADMIN@, and that @ROLE_SUPERADMIN@ implies being granted @ROLE_FINANCE_ADMIN@, you can express that hierarchy as:

{code}
grails.plugins.springsecurity.roleHierarchy = '''
   ROLE_SUPERADMIN > ROLE_FINANCE_ADMIN
   ROLE_FINANCE_ADMIN > ROLE_ADMIN
'''
{code}

Then you can simplify your mappings by specifying only the roles that are required:

{code}
package com.mycompany.myapp

import grails.plugins.springsecurity.Secured

class SomeController {

   @Secured(['ROLE_ADMIN'])
   def someAction = {
      ...
   }
}
{code}

You can also reduce the number of granted roles in the database. Where previously you had to grant @ROLE_SUPERADMIN@, @ROLE_FINANCE_ADMIN@, and @ROLE_ADMIN@, now you only need to grant @ROLE_SUPERADMIN@.

