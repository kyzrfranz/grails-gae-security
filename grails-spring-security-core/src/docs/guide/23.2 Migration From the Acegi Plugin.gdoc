In this tutorial we'll discuss the general steps required to migrate from the Acegi plugin to the Spring Security Core plugin. A lot of the material here comes from [an email|http://grails.1312388.n4.nabble.com/Migrating-Acegi-plugin-to-new-Security-plugin-td2290399.html] that Lubos Pochman sent to the [User mailing list|http://www.grails.org/Mailing+lists] documenting the steps he took to upgrade from the Acegi plugin.

This isn't a standard step-by-step tutorial since every application is different and the steps required will vary from project to project. Instead these are guidelines and things to keep in mind. You should also read [Section 2|guide:2 Differences Between the Spring Security and Acegi Plugins] and [Section 3|guide:3 Migrating from the Acegi Plugin].

The first thing to do is uninstall the Acegi plugin
{code}
$ grails uninstall-plugin acegi
{code}
and install Spring Security Core
{code}
$ grails install-plugin spring-security-core
{code}

If this were a new project the next step would be to run the [s2-quickstart|Scripts] script but you wouldn't do this for an existing project where you already have a User and Role class, so it's a good idea to work through the [bookstore tutorial|guide:23.1 Using Controller Annotations to Secure URLs] and use the files generated in that project. The files that the script generates are

* @grails-app/domain/com/testapp/User.groovy@
* @grails-app/domain/com/testapp/Role.groovy@
* @grails-app/domain/com/testapp/UserRole.groovy@
* @grails-app/controllers/LoginController.groovy@
* @grails-app/controllers/LogoutController.groovy@
* @grails-app/views/login/auth.gsp@
* @grails-app/views/login/denied.gsp@

Migrate any changes you made in @LoginController.groovy@, @LogoutController.groovy@, @auth.gsp@ and @denied.gsp@, and overwrite your files with those. Do the same for @User.groovy@ and @Role.groovy@, and move @UserRole.groovy@ into your project.

h4. User and Role UI

You can use the standard Grails @generate-all@ script to create a UI to manage Users and Roles as described in the previous tutorial, or for a more complete solution use the [Spring Security UI|http://grails.org/plugin/spring-security-ui] plugin.

h4. authenticateService

The utility service in Spring Security Core is @SpringSecurityService@, so you need to replace @def authenticateService@ with @def springSecurityService@. Many of the methods have the same names and signatures but there are some differences:
* @principal()@ was renamed to @getPrincipal()@
* @ifAllGranted()@, @ifNotGranted()@, and @ifAnyGranted()@ were removed; use @org.codehaus.groovy.grails.plugins.springsecurity.SpringSecurityUtils.ifAllGranted()@, @ifNotGranted()@, and @ifAnyGranted()@ instead
* @getSecurityConfig()@ was removed, use @SpringSecurityUtils.getSecurityConfig()@ instead

One significant change between the plugins is that the @UserDetails@ implementation (@GrailsUser@) no longer has a reference to the domain class instance. This was intended to make it easy to access User class data that's not available in the @Principal@ but it has frustrating side effects due to being a disconnected Hibernate object. Instead @GrailsUser@ stores the user's id so you can conveniently retrieve the instance when needed. So instead of

{code}
def user = authenticateService.userDomain()
user = User.get(user.id)
{code}

use this instead:

{code}
def user = User.get(springSecurityService.principal.id)
{code}

h4. Role granting

The Acegi plugin uses a standard Grails many-to-many relationship (i.e. using @hasMany@ and @belongsTo@) between User and Role but this will have performance problems if you have many users. Spring Security Core also uses a many-to-many relationship but maps the join table as a domain class instead of using collections. In the Acegi plugin you would grant a role to a user using
{code}
Role role = ...
User user = ...
role.addToPeople(user)
{code}

and remove the grant with
{code}
Role role = ...
User user = ...
role.removeFromPeople(user)
{code}

In Spring Security Core you use the helper methods in @UserRole@
{code}
Role role = ...
User user = ...
UserRole.create user, role
{code}

and

{code}
Role role = ...
User user = ...
UserRole.remove user, role
{code}

which directly insert or delete rows in the User/Role join table.

h4. SecurityConfig.groovy

Configuration settings are now stored in @grails-app/conf/Config.groovy@ along with the rest of the application configuration. The primary motiviation for this change is to easily support environment-specific security settings. Migrate settings from @SecurityConfig.groovy@ to @Config.groovy@ (see [this summary|guide:3 Migrating from the Acegi Plugin] for the new names.

In particular it's important that the following properties be configured (replace class and package names to match your domain classes):
{code}
grails.plugins.springsecurity.userLookup.userDomainClassName = 'com.yourcompany.yourapp.User'
grails.plugins.springsecurity.userLookup.authorityJoinClassName = 'com.yourcompany.yourapp.UserRole'
grails.plugins.springsecurity.authority.className = 'com.yourcompany.yourapp.Role'
{code}

Delete @SecurityConfig.groovy@ when you're finished.

h4. Controller annotations

The @Secured@ annotation changed from @org.codehaus.groovy.grails.plugins.springsecurity.Secured@ to @grails.plugins.springsecurity.Secured@. Consider using [SpEL expressions|guide:5.4 Using Expressions to Create Descriptive, Fine-Grained Rules] since they're a lot more powerful and expressive than simple role names.

h4. Security tags

* tag names now start with 'if' instead of 'is', and the @role@ attribute changed to @roles@, so for example change @<g:ifAnyGranted role='...'>@ to @<sec:ifAnyGranted roles='...'>@
* use @<sec:username/>@ instead of @<g:loggedInUserInfo(field:'username')}/>@ - use @<sec:loggedInUserInfo>@ to render other @GrailsUser@ attributes

See more details about the taglibs in [Section 6|guide:6 Helper Classes].
