Spring Security uses an [Authentication|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/Authentication.html] object to determine whether the current user has the right to perform a secured action, such as accessing a URL, manipulating a secured domain object, accessing a secured method, and so on. This object is created during login. Typically overlap occurs between the need for authentication data and the need to represent a user in the application in ways that are unrelated to security. The mechanism for populating the authentication is completely pluggable in Spring Security; you only need to provide an implementation of [UserDetailsService|http://static.springsource.org/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/UserDetailsService.html] and implement its one method, @loadUserByUsername()@.

By default the plugin uses a Grails 'person' domain class to manage this data. The class name is @Person@, and @username@, @enabled@, @password@ are the default names of the required properties. You can easily [plug in your own implementation|guide:11 Custom UserDetailsService], and rename the class, package, and fields. In addition, you should define an @authorities@ property to retrieve roles; this can be a public field or a @getAuthorities()@ method, and it can be defined through a traditional GORM many-to-many or a custom mapping.

Assuming you choose @com.mycompany.myapp@ as your package, and @User@ as your class name, you'll generate this class:

{code}
package com.mycompany.myapp

class User {

   String username
   String password
   boolean enabled
   boolean accountExpired
   boolean accountLocked
   boolean passwordExpired

   static constraints = {
      username blank: false, unique: true
      password blank: false
   }

   static mapping = {
      password column: '`password`'
   }

   Set<Role> getAuthorities() {
      UserRole.findAllByUser(this).collect { it.role } as Set
   }
}
{code}

Optionally, add other properties such as @email@, @firstName@, @lastName@, and convenience methods, and so on:

{code}
package com.mycompany.myapp

class User {

   String username
   String password
   boolean enabled
   String email
   String firstName
   String lastName

   static constraints = {
      username blank: false, unique: true
      password blank: false
   }

   Set<Role> getAuthorities() {
      UserRole.findAllByUser(this).collect { it.role } as Set
   }

   def someMethod {
      ...
   }
}
{code}

The @getAuthorities()@ method is analagous to defining @static hasMany = \[authorities: Authority\]@ in a traditional many-to-many mapping. This way @GormUserDetailsService@ can call @user.authorities@ during login to retrieve the roles without the overhead of a bidirectional many-to-many mapping.

The class and property names are configurable using these configuration attributes:

{table}
*Property* | *Default Value* | *Meaning*
userLookup.userDomainClassName | 'Person' | User class name
userLookup.usernamePropertyName | 'username' | User class username field
userLookup.passwordPropertyName | 'password' | User class password field
userLookup.authoritiesPropertyName | 'authorities' | User class role collection field
userLookup.enabledPropertyName | 'enabled' | User class enabled field
userLookup.accountExpiredPropertyName | 'accountExpired' | User class account expired field
userLookup.accountLockedPropertyName | 'accountLocked' | User class account locked field
userLookup.passwordExpiredPropertyName | 'passwordExpired' | User class password expired field
userLookup.authorityJoinClassName | 'PersonAuthority' | User/Role many-many join class name
{table}

