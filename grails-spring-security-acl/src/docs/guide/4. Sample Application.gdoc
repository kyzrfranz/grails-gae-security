Working with ACLs in Spring Security is complex but it will be easier to understand with a sample application. To help get you started, there's a Grails application that uses the plugin to test with. It's based on the [Contacts|http://static.springsource.org/spring-security/site/start-here.html] application that comes with Spring Security. But where the Spring Security application uses SpringMVC, JDBC, etc., this application is 100% Grails. Download it from [here|http://github.com/grails-plugins/grails-spring-security-acl/raw/master/grails-contacts.zip].

Unpack the zip file, for example in @/opt/workspace/grails-contacts@

Run the @upgrade@ script to make sure it's compatible with the version of Grails you're using (note that all of the Spring Security plugins require at least version 1.2.2 of Grails):

bc.
$ cd /opt/workspace/grails-contacts
$ grails upgrade

and start the app:

bc.
$ grails run-app

Open [http://localhost:8080/grails-contacts/|http://localhost:8080/grails-contacts/] in a browser to get started. The main functionality is at [http://localhost:8080/grails-contacts/secure|http://localhost:8080/grails-contacts/secure]. The login page lists the various configured users and their passwords; the "rod" user is an admin and has full access and the other users have various grants and ownership.
